package org.xiesen.windows;


import cn.hutool.core.lang.Validator;

import java.util.concurrent.TimeUnit;

public class Time {

    /**
     * The time unit for this policy's time interval.
     */
    private final TimeUnit unit;

    /**
     * The size of the windows generated by this policy.
     */
    private final long size;

    /**
     * Instantiation only via factory method.
     */
    private Time(long size, TimeUnit unit) {
        this.unit = Validator.validateNotNull(unit, "time unit may not be null");
        this.size = size;

    }

    // ------------------------------------------------------------------------
    //  Properties
    // ------------------------------------------------------------------------

    /**
     * Gets the time unit for this policy's time interval.
     *
     * @return The time unit for this policy's time interval.
     */
    public TimeUnit getUnit() {
        return unit;
    }

    /**
     * Gets the length of this policy's time interval.
     *
     * @return The length of this policy's time interval.
     */
    public long getSize() {
        return size;
    }

    /**
     * Converts the time interval to milliseconds.
     *
     * @return The time interval in milliseconds.
     */
    public long toMilliseconds() {
        return unit.toMillis(size);
    }

    // ------------------------------------------------------------------------
    //  Factory
    // ------------------------------------------------------------------------

    /**
     * Creates a new {@link Time} of the given duration and {@link TimeUnit}.
     *
     * <p>The {@code Time} refers to the time characteristic that is set on the dataflow via
     *
     * @param size The duration of time.
     * @param unit The unit of time of the duration, for example {@code TimeUnit.SECONDS}.
     * @return The time policy.
     */
    public static Time of(long size, TimeUnit unit) {
        return new Time(size, unit);
    }

    /**
     * Creates a new {@link Time} that represents the given number of milliseconds.
     */
    public static Time milliseconds(long milliseconds) {
        return of(milliseconds, TimeUnit.MILLISECONDS);
    }

    /**
     * Creates a new {@link Time} that represents the given number of seconds.
     */
    public static Time seconds(long seconds) {
        return of(seconds, TimeUnit.SECONDS);
    }

    /**
     * Creates a new {@link Time} that represents the given number of minutes.
     */
    public static Time minutes(long minutes) {
        return of(minutes, TimeUnit.MINUTES);
    }

    /**
     * Creates a new {@link Time} that represents the given number of hours.
     */
    public static Time hours(long hours) {
        return of(hours, TimeUnit.HOURS);
    }

    /**
     * Creates a new {@link Time} that represents the given number of days.
     */
    public static Time days(long days) {
        return of(days, TimeUnit.DAYS);
    }
}
